#!/usr/bin/env superdoit_solo
# Standard options are always present unless customoptions section is used
#
options
{
  SuperDoitOptionalOptionWithRequiredArg long: 'rowanProjectsHome' default: '$ROWAN_PROJECTS_HOME'.
}
%
# Example options section
#
#options
#{
#	SuperDoitOptionalOptionWithNoArg long: 'noarg'.
#	SuperDoitOptionalOptionWithNoArg long: 'noarg' short: 'n'.
#
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' default: 'default'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o' default: 'default'.
#
#	SuperDoitRequiredOptionWithRequiredArg long: 'required'.
#	SuperDoitRequiredOptionWithRequiredArg long: 'required' short: 'r'.
#}
#%
#
usage
-----
USAGE
      # with GS_HOME env var set
      $basename [--help | -h] [--debug | -D] [-- [<stone-name> [<topaz-command-line-args>] ] ]
      # with GEMSTONE env var set
      $basename [--help | -h] [--debug | -D] --  -l -I <path-to-.topazini-file>

DESCRIPTION
  Script to create the Rowan project metadata for the OrderedDictionary project.
  
	This project is using filetree with Monticello metadata and Rowan does not write
  Monticello metadata, so in the short term I will write things out in tonel format;
  and then merge in the latest OrderedDictionary work from Pharo (in tonel format)
	remove Monticello metadata from the filetree packages and recopy the code back to
	filetree.

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename -h -- rowan_361
  $basename -h -- -l -I .topazini

  $basename -D -- rowan_361
  $basename -D -- -l -I .topazini

  $basename -- rowan_361
  $basename -- -l -I .topazini
-----
%
method
definedProjectForCommon: projectName
	^ (Rowan newProjectNamed: projectName)
		gemstoneSetDefaultSymbolDictNameTo: 'Globals';
		repoType: #git;	
		packageConvention: 'Monticello';
		projectSpecPath: 'gemstone/rowan';	
		projectsPath: 'gemstone/rowan/projects';
		specsPath: 'gemstone/rowan/specs';
		projectsPath: 'gemstone/rowan/projects';
		projectSpecFile: 'gemstone/rowan/project.ston';
		packagesPath: 'repository';
		componentsPath: 'gemstone/rowan/components';
		yourself.
%
method
definedProjectForFiletree: projectName
	^ (self definedProjectForCommon: projectName)
		packageFormat: 'filetree';
		yourself.
%
doit
	| projectName componentName commonPackageNames definedProject resolvedProject projectDefinition |

	projectName := 'smalltalkCI'.
	componentName := 'Core'.
	commonPackageNames := 	{
			'SmalltalkCI-Core'.
		}.

	(self rowanProjectsHome asFileReference / projectName / 'gemstone' / 'rowan') ensureDeleteAll.

	definedProject := self definedProjectForFiletree: projectName.
	definedProject addTopLevelComponentNamed: componentName.
	commonPackageNames do: [:packageName |
			definedProject 
				addPackageNamed: packageName
				toComponentNamed: componentName ].
	
	resolvedProject := definedProject resolve _resolvedProject.
	Rowan projectTools createV2
		createResolvedProjectRepository: resolvedProject repository.
	resolvedProject 
		exportProjectSpecification;
		exportProjects;
		exportComponents;
		yourself.
	resolvedProject read.
	projectDefinition := resolvedProject _projectDefinition copy.

	"convert to tonel packages and write"
	definedProject
		packageFormat: 'tonel';
		packagesPath: 'gemstone/rowan/tonel';
		yourself.

	resolvedProject := definedProject resolve.
	resolvedProject _resolvedProject _projectDefinition: projectDefinition.
	resolvedProject write.

	^ self noResult
%
