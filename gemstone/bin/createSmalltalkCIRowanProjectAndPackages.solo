#!/usr/bin/env superdoit_solo
# Standard options are always present unless customoptions section is used
#
options
{
	SuperDoitRequiredOptionWithRequiredArg long: 'rowanProjectsHome'.
}
%
# Example options section
#
#options
#{
#	SuperDoitOptionalOptionWithNoArg long: 'noarg'.
#	SuperDoitOptionalOptionWithNoArg long: 'noarg' short: 'n'.
#
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' default: 'default'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o' default: 'default'.
#
#	SuperDoitRequiredOptionWithRequiredArg long: 'required'.
#	SuperDoitRequiredOptionWithRequiredArg long: 'required' short: 'r'.
#}
#%
#
usage
-----
USAGE
      # with GS_HOME env var set
      $basename [--help | -h] [--debug | -D]
      # with GEMSTONE env var set
      $basename [--help | -h] [--debug | -D]

DESCRIPTION
  Script to create the Rowan project metadata for the sm,alltalkCI project ... include pharo-specific
  packages in the Rowan project, so that repackaging can be done programmatically.

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename -h

  $basename -D --rowanProjectsHome=$GS_HOME/shared/repos
  $basename --rowanProjectsHome=$GS_HOME/shared/repos
-----
%
doit
	| projectName componentName commonPackageNames gemstonePackageNames
		gemstoneTestPackageNames definedProject pharoComponent testPackageNames 
		testsComponent gemstoneComponent gemstoneTestsComponent resolvedProject |

	projectName := 'smalltalkCI'.
	componentName := 'Core'.
	commonPackageNames := 	{
			'SmalltalkCI-Core' .
			'SmalltalkCI-Excluded-Tests' .
		}.
	gemstonePackageNames := 	{
			'SmalltalkCI-GemStone-Core' .
		}.
	testPackageNames := { 
			'SmalltalkCI-Tests'	.
		}.
	gemstoneTestPackageNames := {
			'SmalltalkCI-GemStone-Tests' .
		}.

	('$ROWAN_PROJECTS_HOME' asFileReference / projectName / 'gemstone' / 'rowan') ensureDeleteAll.

	definedProject := Rowan newProjectNamed: projectName.
	definedProject
		gemstoneSetDefaultSymbolDictNameTo: 'Globals';
		repoType: #git;	
		customConditionalAttributes: #('tests' );
		packageFormat: 'filetree';
		packageConvention: 'Monticello';
		projectSpecPath: 'gemstone/rowan';	
		projectsPath: 'gemstone/rowan/projects';
		specsPath: 'gemstone/rowan/specs';
		projectsPath: 'gemstone/rowan/projects';
		projectSpecFile: 'gemstone/rowan/project.ston';
		packagesPath: 'repository';
		componentsPath: 'gemstone/rowan/components';
		yourself.
	definedProject addTopLevelComponentNamed: componentName.
	commonPackageNames do: [:packageName |
			definedProject 
				addPackageNamed: packageName
				toComponentNamed: componentName ].

	testsComponent := definedProject
		addSimpleNestedComponentNamed: 'tests/tests' 
		condition: 'tests' 
		comment: ''.
	testPackageNames do: [:packageName |
			definedProject 
				addPackageNamed: packageName
				toComponentNamed: testsComponent name ].
	definedProject 
		addComponentNamed: testsComponent name 
		toComponentNamed: componentName.

	gemstoneComponent := definedProject
		addSimpleNestedComponentNamed: 'gemstone/gemstone' 
		condition: 'gemstone' 
		comment: ''.
	gemstonePackageNames do: [:packageName |
			definedProject 
				addPackageNamed: packageName
				toComponentNamed: gemstoneComponent name ].
	definedProject 
		addComponentNamed: gemstoneComponent name 
		toComponentNamed: componentName.

	gemstoneTestsComponent := definedProject
		addSimpleNestedComponentNamed: 'tests/gemstone/gemstone' 
		condition: 'gemstone' 
		comment: ''.
	gemstoneTestPackageNames do: [:packageName |
			definedProject 
				addPackageNamed: packageName
				toComponentNamed: gemstoneTestsComponent name ].
	definedProject 
		addComponentNamed: gemstoneTestsComponent name 
		toComponentNamed: testsComponent name.

	resolvedProject := definedProject resolve.	"create or attach to existing repository"
	Rowan projectTools createV2
		createResolvedProjectRepository: resolvedProject repository.
	resolvedProject _resolvedProject 
		exportProjectSpecification;
		exportProjects;
		exportComponents;
		exportLoadSpecification;
		yourself.			"write all rowan metadata except packages"

	^ self noResult
%
